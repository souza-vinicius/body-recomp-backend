"""Create progress_entries table

Revision ID: 0e3cbdacd35c
Revises: ba6e0deabfa8
Create Date: 2025-10-27 00:38:08.846666

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0e3cbdacd35c'
down_revision: Union[str, None] = 'ba6e0deabfa8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('progress_entries',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('goal_id', sa.UUID(), nullable=False),
    sa.Column('measurement_id', sa.UUID(), nullable=False),
    sa.Column('week_number', sa.Integer(), nullable=False),
    sa.Column('body_fat_percentage', sa.Numeric(precision=4, scale=2), nullable=False),
    sa.Column('weight_kg', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('body_fat_change', sa.Numeric(precision=4, scale=2), nullable=False),
    sa.Column('weight_change_kg', sa.Numeric(precision=4, scale=2), nullable=False),
    sa.Column('is_on_track', sa.Boolean(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('logged_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint('body_fat_percentage >= 3.0 AND body_fat_percentage <= 60.0', name='reasonable_body_fat_range'),
    sa.CheckConstraint('week_number > 0', name='positive_week_number'),
    sa.CheckConstraint('weight_kg >= 30.0 AND weight_kg <= 300.0', name='reasonable_weight_range'),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['measurement_id'], ['body_measurements.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('measurement_id'),
    comment='Weekly progress entries tracking goal progress over time'
    )
    op.create_index(op.f('ix_progress_entries_goal_id'), 'progress_entries', ['goal_id'], unique=False)
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.drop_index(op.f('ix_progress_entries_goal_id'), table_name='progress_entries')
    op.drop_table('progress_entries')
    # ### end Alembic commands ###
